H <- sqrt(W)%*%X%*%H%*%t(X)%*%sqrt(W)
h <- diag(H)
soma <- resid(fit.model, type="pearson")
soma <- sum(soma^2)
fi <- (n-p)/soma
ts <- resid(fit.model,type="pearson")*sqrt(fi/(1-h))
td <- resid(fit.model,type="deviance")*sqrt(fi/(1-h))
par(mfrow=c(2,2))
di <- (h/(1-h))*(ts^2)
a <- max(td)
b <- min(td)
#
plot(fitted(fit.model),h,xlab="Valor Ajustado", ylab="Medida h", pch=16)
#identify(fitted(fit.model), h, n=3)
#
plot(fitted(fit.model), di,xlab="Valor Ajustado", ylab="Distância de Cook", pch=16)
#identify(fitted(fit.model),di, n=6)
#
plot(fitted(fit.model),td,xlab="Valor Ajustado", ylab="Resíduo Componente do Desvio",
ylim=c(b-1,a+1),pch=16)
abline(2,0,lty=2)
abline(-2,0,lty=2)
#identify(fitted(fit.model),td, n=1)
eta <- predict(fit.model)
z <- eta + resid(fit.model, type="pearson")/sqrt(w)
plot(predict(fit.model),z,xlab="Preditor Linear",
ylab="Variavel z", pch=16)
lines(smooth.spline(predict(fit.model), z, df=2))
# os pontos que  mais  se destacam usar o comando
# identify(...). Se por exemplo se destacam três pontos
# no plot(fitted(fit.model),h,...),  após esse comando coloque
#
#        > identify(fitted(fit.model),h,n=3)
#
# O mesmo pode ser feito nos demais gráficos. Nos gráficos de
# resíduos foram colocados os limites ylim=c(a-1,b+1), em que a
# é o menor valor e b o maior valor para o resíduo.
#------------------------------------------------------------#
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
w <- fit.model$weights
W <- diag(w)
H <- solve(t(X)%*%W%*%X)
H <- sqrt(W)%*%X%*%H%*%t(X)%*%sqrt(W)
h <- diag(H)
soma <- resid(fit.model, type="pearson")
soma <- sum(soma^2)
fi <- (n-p)/soma
ts <- resid(fit.model,type="pearson")*sqrt(fi/(1-h))
td <- resid(fit.model,type="deviance")*sqrt(fi/(1-h))
par(mfrow=c(2,2))
di <- (h/(1-h))*(ts^2)
a <- max(td)
b <- min(td)
#
plot(fitted(fit.model),h,xlab="Valor Ajustado", ylab="Medida h", pch=16)
#identify(fitted(fit.model), h, n=3)
#
plot(fitted(fit.model), di,xlab="Valor Ajustado", ylab="Distância de Cook", pch=16)
#identify(fitted(fit.model),di, n=6)
#
plot(fitted(fit.model),td,xlab="Valor Ajustado", ylab="Resíduo Componente do Desvio",
ylim=c(b-1,a+1),pch=16)
abline(2,0,lty=2)
abline(-2,0,lty=2)
#identify(fitted(fit.model),td, n=1)
eta <- predict(fit.model)
z <- eta + resid(fit.model, type="pearson")/sqrt(w)
plot(predict(fit.model),z,xlab="Preditor Linear",
ylab="Variavel z", pch=16)
lines(smooth.spline(predict(fit.model), z, df=2))
summary(fit.sqrt)
deviance(fit.model)
fit.model = glm(Foliage ~ Origin + DBH + Age,
family = inverse.gaussian(link = link_custom),
data = lime)
summary(fit.sqrt)
deviance(fit.model)
par(mfrow = c(2,2))
plot(fit.sqrt)
identify(fit.model)
fit.model1 = glm(Foliage ~ Origin + DBH,
family = inverse.gaussian(link = link_custom),
data = lime)
plot(fit.model)
summary(fit.model1)
summary(fit.model1)
deviance(fit.model1)
par(mfrow = c(2,2))
plot(fit.model1)
anova(fit.model1, fit.model)
identify(fitted(fit.model),h,n=3)
source("diag_ninv")
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
w <- fit.model$weights
W <- diag(w)
H <- solve(t(X)%*%W%*%X)
H <- sqrt(W)%*%X%*%H%*%t(X)%*%sqrt(W)
h <- diag(H)
soma <- resid(fit.model, type="pearson")
soma <- sum(soma^2)
fi <- (n-p)/soma
ts <- resid(fit.model,type="pearson")*sqrt(fi/(1-h))
td <- resid(fit.model,type="deviance")*sqrt(fi/(1-h))
par(mfrow=c(2,2))
di <- (h/(1-h))*(ts^2)
a <- max(td)
b <- min(td)
#
plot(fitted(fit.model),h,xlab="Valor Ajustado", ylab="Medida h", pch=16)
#identify(fitted(fit.model), h, n=3)
#
plot(fitted(fit.model), di,xlab="Valor Ajustado", ylab="Distância de Cook", pch=16)
#identify(fitted(fit.model),di, n=6)
#
plot(fitted(fit.model),td,xlab="Valor Ajustado", ylab="Resíduo Componente do Desvio",
ylim=c(b-1,a+1),pch=16)
abline(2,0,lty=2)
abline(-2,0,lty=2)
#identify(fitted(fit.model),td, n=1)
eta <- predict(fit.model)
z <- eta + resid(fit.model, type="pearson")/sqrt(w)
plot(predict(fit.model),z,xlab="Preditor Linear",
ylab="Variavel z", pch=16)
lines(smooth.spline(predict(fit.model), z, df=2))
identify(fitted(fit.model),h,n=3)
identify(fitted(fit.model),h ,n = 3)
#
plot(fitted(fit.model),h,xlab="Valor Ajustado", ylab="Medida h", pch=16)
identify(fitted(fit.model), h, n=3)
#
plot(fitted(fit.model), di,xlab="Valor Ajustado", ylab="Distância de Cook", pch=16)
identify(fitted(fit.model),di, n=6)
#
plot(fitted(fit.model),td,xlab="Valor Ajustado", ylab="Resíduo Componente do Desvio",
ylim=c(b-1,a+1),pch=16)
abline(2,0,lty=2)
abline(-2,0,lty=2)
#identify(fitted(fit.model),td, n=1)
eta <- predict(fit.model)
z <- eta + resid(fit.model, type="pearson")/sqrt(w)
plot(predict(fit.model),z,xlab="Preditor Linear",
ylab="Variavel z", pch=16)
lines(smooth.spline(predict(fit.model), z, df=2))
rig <- function(n, mu = stop("no shape arg"), lambda = 1)
{
#  Random variates from inverse Gaussian distribution
#  Reference:
#      Chhikara and Folks, The Inverse Gaussian Distribution,
#      Marcel Dekker, 1989, page 53.
#  GKS  15 Jan 98
#
if(any(mu<=0)) stop("mu must be positive")
if(any(lambda<=0)) stop("lambda must be positive")
if(length(n)>1) n <- length(n)
if(length(mu)>1 && length(mu)!=n) mu <- rep(mu,length=n)
if(length(lambda)>1 && length(lambda)!=n) lambda <- rep(lambda,length=n)
y2 <- rchisq(n,1)
u <- runif(n)
r1 <- mu/(2*lambda) * (2*lambda + mu*y2 - sqrt(4*lambda*mu*y2 + mu^2*y2^2))
r2 <- mu^2/r1
ifelse(u < mu/(mu+r1), r1, r2)
}
#------------------------------------------------------------#
#
par(mfrow=c(1,1))
X <- model.matrix(fit.model)
n <- nrow(X)
fit.model = glm(Foliage ~ Origin + DBH + Age,
family = inverse.gaussian(link = link_custom),
data = lime)
summary(fit.sqrt)
summary(fit.model)
deviance(fit.model)
par(mfrow = c(2,2))
plot(fit.model)
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
w <- fit.model$weights
W <- diag(w)
H <- solve(t(X)%*%W%*%X)
H <- sqrt(W)%*%X%*%H%*%t(X)%*%sqrt(W)
h <- diag(H)
soma <- resid(fit.model, type="pearson")
soma <- sum(soma^2)
fi <- (n-p)/soma
ts <- resid(fit.model,type="pearson")*sqrt(fi/(1-h))
td <- resid(fit.model,type="deviance")*sqrt(fi/(1-h))
par(mfrow=c(2,2))
di <- (h/(1-h))*(ts^2)
a <- max(td)
b <- min(td)
#
plot(fitted(fit.model),h,xlab="Valor Ajustado", ylab="Medida h", pch=16)
identify(fitted(fit.model), h, n=3)
#
plot(fitted(fit.model), di,xlab="Valor Ajustado", ylab="Distância de Cook", pch=16)
identify(fitted(fit.model),di, n=6)
#
plot(fitted(fit.model),td,xlab="Valor Ajustado", ylab="Resíduo Componente do Desvio",
ylim=c(b-1,a+1),pch=16)
abline(2,0,lty=2)
abline(-2,0,lty=2)
#identify(fitted(fit.model),td, n=1)
eta <- predict(fit.model)
z <- eta + resid(fit.model, type="pearson")/sqrt(w)
plot(predict(fit.model),z,xlab="Preditor Linear",
ylab="Variavel z", pch=16)
lines(smooth.spline(predict(fit.model), z, df=2))
#------------------------------------------------------------#
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
w <- fit.model$weights
W <- diag(w)
H <- solve(t(X)%*%W%*%X)
H <- sqrt(W)%*%X%*%H%*%t(X)%*%sqrt(W)
h <- diag(H)
soma <- resid(fit.model, type="pearson")
soma <- sum(soma^2)
fi <- (n-p)/soma
ts <- resid(fit.model,type="pearson")*sqrt(fi/(1-h))
td <- resid(fit.model,type="deviance")*sqrt(fi/(1-h))
par(mfrow=c(2,2))
di <- (h/(1-h))*(ts^2)
a <- max(td)
b <- min(td)
#
plot(fitted(fit.model),h,xlab="Valor Ajustado", ylab="Medida h", pch=16)
#identify(fitted(fit.model), h, n=3)
#
plot(fitted(fit.model), di,xlab="Valor Ajustado", ylab="Distância de Cook", pch=16)
#identify(fitted(fit.model),di, n=6)
#
plot(fitted(fit.model),td,xlab="Valor Ajustado", ylab="Resíduo Componente do Desvio",
ylim=c(b-1,a+1),pch=16)
abline(2,0,lty=2)
abline(-2,0,lty=2)
#identify(fitted(fit.model),td, n=1)
eta <- predict(fit.model)
z <- eta + resid(fit.model, type="pearson")/sqrt(w)
plot(predict(fit.model),z,xlab="Preditor Linear",
ylab="Variavel z", pch=16)
lines(smooth.spline(predict(fit.model), z, df=2))
# os pontos que  mais  se destacam usar o comando
# identify(...). Se por exemplo se destacam três pontos
# no plot(fitted(fit.model),h,...),  após esse comando coloque
#
#        > identify(fitted(fit.model),h,n=3)
#
# O mesmo pode ser feito nos demais gráficos. Nos gráficos de
# resíduos foram colocados os limites ylim=c(a-1,b+1), em que a
# é o menor valor e b o maior valor para o resíduo.
#------------------------------------------------------------#
pdf('diagnostico.pdf', width = 10, height = 6, family = 'Helvetica', pointsize = 12)
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
w <- fit.model$weights
W <- diag(w)
H <- solve(t(X)%*%W%*%X)
H <- sqrt(W)%*%X%*%H%*%t(X)%*%sqrt(W)
h <- diag(H)
soma <- resid(fit.model, type="pearson")
soma <- sum(soma^2)
fi <- (n-p)/soma
ts <- resid(fit.model,type="pearson")*sqrt(fi/(1-h))
td <- resid(fit.model,type="deviance")*sqrt(fi/(1-h))
par(mfrow=c(2,2))
di <- (h/(1-h))*(ts^2)
a <- max(td)
b <- min(td)
#
plot(fitted(fit.model),h,xlab="Valor Ajustado", ylab="Medida h", pch=16)
#identify(fitted(fit.model), h, n=3)
#
plot(fitted(fit.model), di,xlab="Valor Ajustado", ylab="Distância de Cook", pch=16)
#identify(fitted(fit.model),di, n=6)
#
plot(fitted(fit.model),td,xlab="Valor Ajustado", ylab="Resíduo Componente do Desvio",
ylim=c(b-1,a+1),pch=16)
abline(2,0,lty=2)
abline(-2,0,lty=2)
#identify(fitted(fit.model),td, n=1)
eta <- predict(fit.model)
z <- eta + resid(fit.model, type="pearson")/sqrt(w)
plot(predict(fit.model),z,xlab="Preditor Linear",
ylab="Variavel z", pch=16)
lines(smooth.spline(predict(fit.model), z, df=2))
dev.off()
setwd("C:/GRADUACAO/DISCIPLINAS 2025 1/MODELOS DE REGRESSAO II/SEMINARIOS/SEMINARIO I")
pdf('diagnostico.pdf', width = 10, height = 6, family = 'Helvetica', pointsize = 12)
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
w <- fit.model$weights
W <- diag(w)
H <- solve(t(X)%*%W%*%X)
H <- sqrt(W)%*%X%*%H%*%t(X)%*%sqrt(W)
h <- diag(H)
soma <- resid(fit.model, type="pearson")
soma <- sum(soma^2)
fi <- (n-p)/soma
ts <- resid(fit.model,type="pearson")*sqrt(fi/(1-h))
td <- resid(fit.model,type="deviance")*sqrt(fi/(1-h))
par(mfrow=c(2,2))
di <- (h/(1-h))*(ts^2)
a <- max(td)
b <- min(td)
#
plot(fitted(fit.model),h,xlab="Valor Ajustado", ylab="Medida h", pch=16)
#identify(fitted(fit.model), h, n=3)
#
plot(fitted(fit.model), di,xlab="Valor Ajustado", ylab="Distância de Cook", pch=16)
#identify(fitted(fit.model),di, n=6)
#
plot(fitted(fit.model),td,xlab="Valor Ajustado", ylab="Resíduo Componente do Desvio",
ylim=c(b-1,a+1),pch=16)
abline(2,0,lty=2)
abline(-2,0,lty=2)
#identify(fitted(fit.model),td, n=1)
eta <- predict(fit.model)
z <- eta + resid(fit.model, type="pearson")/sqrt(w)
plot(predict(fit.model),z,xlab="Preditor Linear",
ylab="Variavel z", pch=16)
lines(smooth.spline(predict(fit.model), z, df=2))
dev.off()
pdf('diagnostico.pdf', width = 10, height = 6, family = 'Helvetica', pointsize = 12)
par(mar = c(4, 4, 2, 1))
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
w <- fit.model$weights
W <- diag(w)
H <- solve(t(X)%*%W%*%X)
H <- sqrt(W)%*%X%*%H%*%t(X)%*%sqrt(W)
h <- diag(H)
soma <- resid(fit.model, type="pearson")
soma <- sum(soma^2)
fi <- (n-p)/soma
ts <- resid(fit.model,type="pearson")*sqrt(fi/(1-h))
td <- resid(fit.model,type="deviance")*sqrt(fi/(1-h))
par(mfrow=c(2,2))
di <- (h/(1-h))*(ts^2)
a <- max(td)
b <- min(td)
#
plot(fitted(fit.model),h,xlab="Valor Ajustado", ylab="Medida h", pch=16)
#identify(fitted(fit.model), h, n=3)
#
plot(fitted(fit.model), di,xlab="Valor Ajustado", ylab="Distância de Cook", pch=16)
#identify(fitted(fit.model),di, n=6)
#
plot(fitted(fit.model),td,xlab="Valor Ajustado", ylab="Resíduo Componente do Desvio",
ylim=c(b-1,a+1),pch=16)
abline(2,0,lty=2)
abline(-2,0,lty=2)
#identify(fitted(fit.model),td, n=1)
eta <- predict(fit.model)
z <- eta + resid(fit.model, type="pearson")/sqrt(w)
plot(predict(fit.model),z,xlab="Preditor Linear",
ylab="Variavel z", pch=16)
lines(smooth.spline(predict(fit.model), z, df=2))
dev.off()
pdf('diagnostico.pdf', width = 12, height = 8, family = 'Helvetica', pointsize = 12)
par(mar = c(4, 4, 2, 1))
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
w <- fit.model$weights
W <- diag(w)
H <- solve(t(X)%*%W%*%X)
H <- sqrt(W)%*%X%*%H%*%t(X)%*%sqrt(W)
h <- diag(H)
soma <- resid(fit.model, type="pearson")
soma <- sum(soma^2)
fi <- (n-p)/soma
ts <- resid(fit.model,type="pearson")*sqrt(fi/(1-h))
td <- resid(fit.model,type="deviance")*sqrt(fi/(1-h))
par(mfrow=c(2,2))
di <- (h/(1-h))*(ts^2)
a <- max(td)
b <- min(td)
#
plot(fitted(fit.model),h,xlab="Valor Ajustado", ylab="Medida h", pch=16)
#identify(fitted(fit.model), h, n=3)
#
plot(fitted(fit.model), di,xlab="Valor Ajustado", ylab="Distância de Cook", pch=16)
#identify(fitted(fit.model),di, n=6)
#
plot(fitted(fit.model),td,xlab="Valor Ajustado", ylab="Resíduo Componente do Desvio",
ylim=c(b-1,a+1),pch=16)
abline(2,0,lty=2)
abline(-2,0,lty=2)
#identify(fitted(fit.model),td, n=1)
eta <- predict(fit.model)
z <- eta + resid(fit.model, type="pearson")/sqrt(w)
plot(predict(fit.model),z,xlab="Preditor Linear",
ylab="Variavel z", pch=16)
lines(smooth.spline(predict(fit.model), z, df=2))
dev.off()
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
w <- fit.model$weights
W <- diag(w)
H <- solve(t(X)%*%W%*%X)
H <- sqrt(W)%*%X%*%H%*%t(X)%*%sqrt(W)
h <- diag(H)
soma <- resid(fit.model, type="pearson")
soma <- sum(soma^2)
fi <- (n-p)/soma
ts <- resid(fit.model,type="pearson")*sqrt(fi/(1-h))
td <- resid(fit.model,type="deviance")*sqrt(fi/(1-h))
par(mfrow=c(2,2))
di <- (h/(1-h))*(ts^2)
a <- max(td)
b <- min(td)
#
plot(fitted(fit.model),h,xlab="Valor Ajustado", ylab="Medida h", pch=16)
identify(fitted(fit.model), h, n=2)
#
plot(fitted(fit.model), di,xlab="Valor Ajustado", ylab="Distância de Cook", pch=16)
identify(fitted(fit.model),di, n=1)
#
plot(fitted(fit.model),td,xlab="Valor Ajustado", ylab="Resíduo Componente do Desvio",
ylim=c(b-1,a+1),pch=16)
abline(2,0,lty=2)
abline(-2,0,lty=2)
#identify(fitted(fit.model),td, n=1)
eta <- predict(fit.model)
z <- eta + resid(fit.model, type="pearson")/sqrt(w)
plot(predict(fit.model),z,xlab="Preditor Linear",
ylab="Variavel z", pch=16)
lines(smooth.spline(predict(fit.model), z, df=2))
summary(fit.model)
glm(Foliage ~ Origin + DBH + Age,
family = inverse.gaussian(link = 'log'),
data = lime)
glm(Foliage ~ Origin + DBH + Age,
family = inverse.gaussian(link = 'identity'),
data = lime)
summary(fit.model)
deviance(fit.model)
AIC(fit.model)
summary(fit.model)
fit.model.id = glm(Foliage ~ Origin + DBH + Age,
family = inverse.gaussian(link = 'identity'),
data = lime)
summary(fit.model.id)
deviance(fit.model.id)
fit.model.id = glm(Foliage ~ Origin + DBH + Age,
family = inverse.gaussian(link = 'identity'),
data = lime)
summary(fit.model.id)
AIC(fit.model.id)
deviance(fit.model.id)
fit.model.log = glm(Foliage ~ Origin + DBH + Age,
family = inverse.gaussian(link = 'log'),
data = lime)
summary(fit.model.log)
deviance(fit.model.log)
AIC(fit.model.log)
AIC(fit.model.log)
summary(fit.model)
glimpse(lime$Foliage)
fit.model = glm(Foliage ~ Origin + DBH + Age,
family = inverse.gaussian(link = link_custom),
data = lime)
summary(fit.model)
fit.model2 = glm(Foliage ~ Origin + DBH,
family = inverse.gaussian(link = link_custom),
data = lime)
summary(fit.model2)
# Modelo sem a covariável Age
fit.model2 = glm(Foliage ~ Origin + DBH,
family = inverse.gaussian(link = link_custom),
data = lime)
deviance(fit.model2)
AIC(fit.model2)
# Modelo sem a covariável Origin
fit.model4 = glm(Foliage ~ DBH + Age,
family = inverse.gaussian(link = link_custom),
data = lime)
summary(fit.model4)
deviance(fit.model4)
AIC(fit.model4)
# Modelo sem a covariável Origin
fit.model5 = glm(Foliage ~ Origin*DBH + Age,
family = inverse.gaussian(link = link_custom),
data = lime)
summary(fit.model5)
deviance(fit.model5)
AIC(fit.model5)
anova(fit.model, fit.model1, fit.model2, fit.model3, fit.model4)
# Modelo sem a covariável DBH
fit.model3 = glm(Foliage ~ Origin + Age,
family = inverse.gaussian(link = link_custom),
data = lime)
anova(fit.model, fit.model1, fit.model2, fit.model3, fit.model4)
fit.model6 = glm(Foliage ~ Origin,
family = inverse.gaussian(link = link_custom),
data = lime)
summary(fit.model6)
deviance(fit.model6)
AIC(fit.model6)
anova(fit.model6, fit.model3)
anova(fit.model6, fit.model3, fit.model)
